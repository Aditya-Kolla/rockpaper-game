{"version":3,"sources":["images/rock.png","images/paper.png","images/scissors.png","components/Header/Header.js","components/Layout/Layout.js","components/ScoreBoard/ScoreBoard.js","components/Result/Result.js","components/Choices/Choice/Choice.js","components/Choices/Choices.js","containers/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","header","react_default","a","createElement","layout","props","Fragment","Header","children","scoreBoard","className","id","userScore","compScore","result","dangerouslySetInnerHTML","__html","content","choice","assignedClasses","userChoice","win","push","lose","draw","join","onClick","clicked","src","img","alt","choices","Choice","rock","e","paper","scissors","Game","state","compChoice","handleClick","_this","setState","target","compChoiceHandler","index","Math","floor","random","gameHandler","winHandler","loseHandler","drawHandler","convertLetter","letter","word","userWord","concat","compWord","newResult","setTimeout","console","log","ScoreBoard","this","Result","Choices","Component","App","Layout","containers_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ee64767.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rock.4dcc12c0.png\";","module.exports = __webpack_public_path__ + \"static/media/paper.1ef92cf2.png\";","module.exports = __webpack_public_path__ + \"static/media/scissors.8df80dd3.png\";","import React from 'react';\n\nconst header = () => (\n    <header>\n        <h1>Rock Paper Scissors</h1>\n    </header>\n);\n\nexport default header;","import React from 'react';\n\nimport Header from '../Header/Header';\n\nconst layout = (props) => (\n    <>\n        <Header />\n        {props.children}\n    </>\n);\n\nexport default layout;","import React from 'react';\n\nconst scoreBoard = (props) => (\n    <div className=\"ScoreBoard\">\n        <div id=\"user-badge\" className=\"Badge\">user</div>\n        <div id=\"comp-badge\" className=\"Badge\">comp</div>\n        <span id=\"user-score\">{props.userScore}</span>: <span id=\"comp-score\">{props.compScore}</span>\n    </div>\n);\n\nexport default scoreBoard;","import React from 'react';\n\nconst result = (props) => (\n    <div className=\"Result\">\n        <p dangerouslySetInnerHTML={{__html: props.content}}></p>\n    </div>\n);\n\nexport default result;","import React from 'react';\n\nconst choice = (props) => {\n    \n    let assignedClasses = ['Choice'];\n\n    if(props.id === props.userChoice){\n        if(props.win) assignedClasses.push('Win');\n        if(props.lose) assignedClasses.push('Lose');\n        if(props.draw) assignedClasses.push('Draw');\n    }\n\n\n    return(\n        <div className={assignedClasses.join(' ')} id={props.id} onClick={props.clicked}>\n            <img src={props.img} id={props.id} alt={props.alt} />\n        </div>\n    );\n}\n\nexport default choice;","import React from 'react';\n\nimport Choice from './Choice/Choice'\nimport rock from '../../images/rock.png';\nimport paper from '../../images/paper.png';\nimport scissors from '../../images/scissors.png';\n\nconst choices = (props) => (\n    <div className=\"Choices\">\n        <Choice \n            id=\"r\" \n            img={rock} \n            alt=\"Rock\" \n            userChoice={props.userChoice}\n            win={props.win}\n            lose={props.lose}\n            draw={props.draw}\n            clicked={(e) => props.clicked(e)} />\n        <Choice \n            id=\"p\" \n            img={paper} \n            alt=\"Paper\" \n            userChoice={props.userChoice}\n            win={props.win}\n            lose={props.lose}\n            draw={props.draw}\n            clicked={(e) => props.clicked(e)} />\n        <Choice \n            id=\"s\" \n            img={scissors} \n            alt=\"Scissors\"\n            userChoice={props.userChoice}\n            win={props.win}\n            lose={props.lose}\n            draw={props.draw} \n            clicked={(e) => props.clicked(e)} />\n        \n    </div>\n);\n\nexport default choices;","import React, { Component } from 'react';\n\nimport ScoreBoard from '../../components/ScoreBoard/ScoreBoard';\nimport Result from '../../components/Result/Result';\nimport Choices from '../../components/Choices/Choices';\n\nclass Game extends Component {\n\n    state = {\n        userScore: 0,\n        compScore: 0,\n        userChoice : null,\n        compChoice : null,\n        result: \"Paper covers Rock. You win! 🔥\",\n        win: false,\n        lose: false,\n        draw: false\n    }\n\n    handleClick = (e) => {\n        \n        this.setState({userChoice: e.target.id}, () => {\n            this.compChoiceHandler();\n        });\n    }\n\n    compChoiceHandler = () => {\n        const options = ['r', 'p', 's'];\n        let index = Math.floor(Math.random() * 3);\n        this.setState({ compChoice: options[index]}, () => {\n            this.gameHandler();\n        });\n    }\n\n    gameHandler = () => {\n        const userChoice = this.state.userChoice;\n        const compChoice = this.state.compChoice;\n        switch(userChoice+compChoice){\n            case 'rs':\n            case 'sp':\n            case 'pr': \n                this.winHandler(userChoice, compChoice);\n                break;\n            case 'rp':\n            case 'sr':\n            case 'ps':\n                this.loseHandler(userChoice, compChoice);\n                break;\n            default:\n                this.drawHandler(userChoice, compChoice);\n        }\n    }\n\n    convertLetter = (letter) => {\n        let word;\n        switch(letter) {\n            case 'r':\n                word = \"Rock\";\n                break;\n            case 'p':\n                word = \"Paper\";\n                break;\n            default: word = \"Scissors\";\n        }\n        return word;\n    }\n\n    winHandler = (userChoice, compChoice) => {\n        let smallUser = '<sub><font size=\"3\">user</font></sub>';\n        let smallComp = '<sub><font size=\"3\">comp</font></sub>';\n        let userWord = `${this.convertLetter(userChoice)}${smallUser}`;\n        let compWord = `${this.convertLetter(compChoice)}${smallComp}`;\n        \n        const newResult = `${userWord} beats ${compWord}.  You Win 🔥`\n        this.setState({ \n            userScore: this.state.userScore + 1,\n            result: newResult,\n            win: true\n         }, () => {\n             setTimeout(() => this.setState({win: false}), 350);\n         });\n        console.log(\"USER WON!\");\n    }\n\n    loseHandler = (userChoice, compChoice) => {\n        let smallUser = '<sub><font size=\"3\">user</font></sub>';\n        let smallComp = '<sub><font size=\"3\">comp</font></sub>';\n        let userWord = `${this.convertLetter(userChoice)}${smallUser}`;\n        let compWord = `${this.convertLetter(compChoice)}${smallComp}`;\n\n        const newResult = `${userWord} loses to ${compWord}.  You Lost.. 💩`\n        this.setState({\n            compScore: this.state.compScore + 1,\n            result: newResult,\n            lose: true\n        }, () => {\n            setTimeout(() => this.setState({ lose: false }), 350);\n        });\n        console.log(\"COMP WON!\");\n    }\n\n    drawHandler = (userChoice, compChoice) => {\n        let smallUser = '<sub><font size=\"3\">user</font></sub>';\n        let smallComp = '<sub><font size=\"3\">comp</font></sub>';\n        let userWord = `${this.convertLetter(userChoice)}${smallUser}`;\n        let compWord = `${this.convertLetter(compChoice)}${smallComp}`;\n\n        const newResult = `${userWord} equals ${compWord}. It's a Draw 😐`\n        this.setState({\n            result: newResult,\n            draw: true\n        }, () => {\n            setTimeout(() => this.setState({ draw: false }), 400);\n        });\n        console.log(\"ITS A DRAW\");\n    }\n\n\n    render() {\n        return (\n            <>\n                <ScoreBoard \n                    userScore={this.state.userScore} \n                    compScore={this.state.compScore}/>\n                <Result content={this.state.result} />\n                <Choices \n                    clicked={this.handleClick}\n                    win={this.state.win}\n                    lose={this.state.lose}\n                    draw={this.state.draw}\n                    userChoice={this.state.userChoice} />\n                <p className=\"Message\">Make your move!</p>\n            </>\n        )\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\n\nimport Layout from './components/Layout/Layout';\nimport Game from './containers/Game/Game';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n     <Layout>\n       <Game />\n     </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}