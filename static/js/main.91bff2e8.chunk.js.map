{"version":3,"sources":["images/rock.png","images/paper.png","images/scissor.png","components/Header/Header.js","components/Layout/Layout.js","components/ScoreBoard/ScoreBoard.js","components/Result/Result.js","components/Choices/Choices.js","containers/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","header","react_default","a","createElement","layout","props","Fragment","Header","children","scoreBoard","className","id","userScore","compScore","result","choices","src","rock","alt","paper","scissor","Game","state","ScoreBoard","this","Result","Choices","Component","App","Layout","containers_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qOCQzBC,EANA,kBACXC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,mCCOOC,EAPA,SAACC,GAAD,OACXJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAI,SAAA,KACIL,EAAAC,EAAAC,cAACI,EAAD,MACCF,EAAMG,WCGAC,EARI,SAACJ,GAAD,OACfJ,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cACXT,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,aAAaD,UAAU,SAA/B,QACAT,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,aAAaD,UAAU,SAA/B,QACAT,EAAAC,EAAAC,cAAA,QAAMQ,GAAG,cAAcN,EAAMO,WAHjC,KAGoDX,EAAAC,EAAAC,cAAA,QAAMQ,GAAG,cAAcN,EAAMQ,aCEtEC,EANA,SAACT,GAAD,OACXJ,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UACXT,EAAAC,EAAAC,cAAA,yGCgBOY,EAdC,SAACV,GAAD,OACZJ,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WACXT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UACXT,EAAAC,EAAAC,cAAA,OAAKa,IAAKC,IAAMC,IAAI,UAExBjB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UACXT,EAAAC,EAAAC,cAAA,OAAKa,IAAKG,IAAOD,IAAI,WAEzBjB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UACXT,EAAAC,EAAAC,cAAA,OAAKa,IAAKI,IAASF,IAAI,eCYpBG,6MAnBXC,MAAQ,CACJV,UAAW,EACXC,UAAW,2EAIX,OACIZ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAI,SAAA,KACIL,EAAAC,EAAAC,cAACoB,EAAD,CACIX,UAAWY,KAAKF,MAAMV,UACtBC,UAAWW,KAAKF,MAAMT,YAC1BZ,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAAA,KAAGO,UAAU,WAAb,2BAfGiB,aCUJC,0LARX,OACC3B,EAAAC,EAAAC,cAAC0B,EAAD,KACE5B,EAAAC,EAAAC,cAAC2B,EAAD,cAJWH,cCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.91bff2e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rock.4dcc12c0.png\";","module.exports = __webpack_public_path__ + \"static/media/paper.1ef92cf2.png\";","module.exports = __webpack_public_path__ + \"static/media/scissor.8df80dd3.png\";","import React from 'react';\n\nconst header = () => (\n    <header>\n        <h1>Rock Paper Scissors</h1>\n    </header>\n);\n\nexport default header;","import React from 'react';\n\nimport Header from '../Header/Header';\n\nconst layout = (props) => (\n    <>\n        <Header />\n        {props.children}\n    </>\n);\n\nexport default layout;","import React from 'react';\n\nconst scoreBoard = (props) => (\n    <div className=\"ScoreBoard\">\n        <div id=\"user-badge\" className=\"Badge\">user</div>\n        <div id=\"comp-badge\" className=\"Badge\">comp</div>\n        <span id=\"user-score\">{props.userScore}</span>: <span id=\"comp-score\">{props.compScore}</span>\n    </div>\n);\n\nexport default scoreBoard;","import React from 'react';\n\nconst result = (props) => (\n    <div className=\"Result\">\n        <p>Paper covers Rock. You win! ðŸ”¥ </p>\n    </div>\n);\n\nexport default result;","import React from 'react';\n\nimport rock from '../../images/rock.png';\nimport paper from '../../images/paper.png';\nimport scissor from '../../images/scissor.png';\n\nconst choices = (props) => (\n    <div className=\"Choices\">\n        <div className=\"Choice\">\n            <img src={rock} alt=\"Rock\"/>\n        </div>\n        <div className=\"Choice\">\n            <img src={paper} alt=\"Paper\"/>\n        </div>\n        <div className=\"Choice\">\n            <img src={scissor} alt=\"Scissor\"/>\n        </div>\n    </div>\n);\n\nexport default choices;","import React, { Component } from 'react';\n\nimport ScoreBoard from '../../components/ScoreBoard/ScoreBoard';\nimport Result from '../../components/Result/Result';\nimport Choices from '../../components/Choices/Choices';\n\nclass Game extends Component {\n\n    state = {\n        userScore: 0,\n        compScore: 0,\n    }\n\n    render() {\n        return (\n            <>\n                <ScoreBoard \n                    userScore={this.state.userScore} \n                    compScore={this.state.compScore}/>\n                <Result />\n                <Choices />\n                <p className=\"Message\">Make your move!</p>\n            </>\n        )\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\n\nimport Layout from './components/Layout/Layout';\nimport Game from './containers/Game/Game';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n     <Layout>\n       <Game />\n     </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}